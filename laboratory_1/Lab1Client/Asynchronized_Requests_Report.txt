[POST] Asynchronized Requests for 6 letters and 100 threads
Maximum time of response : 13.735272407531738
Minimum time of response : 7.123951435089111
Medium time of response : 12.756866550445556
Total time of response : 1275.6866550445557

[GET] Asynchronized Requests for 6 letters and 100 threads
Maximum time of response : 14.43440318107605
Minimum time of response : 0.3510618209838867
Medium time of response : 7.552254388332367
Total time of response : 755.2254388332367

[POST] Asynchronized Requests for 4 letters and 500 threads
Maximum time of response : 0.11169981956481934
Minimum time of response : 0.007984161376953125
Medium time of response : 0.030172815799713135
Total time of response : 15.086407899856567

[GET] Asynchronized Requests for 4 letters and 500 threads
Maximum time of response : 0.1186830997467041
Minimum time of response : 0.00399017333984375
Medium time of response : 0.015044349193572998
Total time of response : 7.522174596786499

[POST] Asynchronized Requests for 6 letters and 500 threads
Maximum time of response : 33.917582750320435
Minimum time of response : 5.592313528060913
Medium time of response : 32.689417428681345
Total time of response : 5393.753875732422

[GET] Asynchronized Requests for 6 letters and 500 threads
Maximum time of response : 32.333709955215454
Minimum time of response : 0.1158900260925293
Medium time of response : 17.93143644477382
Total time of response : 2366.949610710144


Timpii de raspuns 
	> Creste vizibil odata cu numarul de caractere - mai multe combinari de litere de verificat daca exista in dictionar
	> Cu numarul de litere, creste si probabilitatea sa fie gasite mai multe cuvinte valide => si timp mai mult pentru scriere
	> Apelul de Init() poate incetini, daca este apelat inaintea unui rand de request-uri

Probleme legate de concurenta & Resource Contention
	> GET - e implementat ca ThreadSafe
		> face modificari direct in Response, care e de la sine ThreadSafe ( = particular fiecarui Request)
	> POST - Scrierea in acelasi fisier a tuturor response-urilor de tip POST
	       => e implementat non-ThreadSafe - desi evit mare parte din problema deschizand fisierul `post_response.txt` cu append
	
		> Problema : Desi fisierul `post_response.txt` este deschis cu append (deci se va scrie mereu la sfarsitul fisierului),
				iar raspunsurile sunt relativ de dimensiune mica
				=> posibilitatea de suprascriere scade semnificativ fata de atunci cand e deschis, simplu, cu write,
				tot vor exista cazuri in care 2 sau mai multe thread-uri se pot intersecta in scrierea in fisier
			   : La un moment dat, fisierul de response poate ajunge la dimensiuni fff mari
		> Solutii : 
			- renuntare la scrierea in fisier, scriu direct in Response [care e Thread Safe]
			sau
			- scrierea raspunsurilor mereu intr-un fisier nou si stergerea lor dupa un interval de secunde
				Problema: s-ar putea ca ultimul thread sa nu apuce sa primeasca fisierul
			sau
			- Folosirea de synchronized intr-o metoda care face scrierea in fisier,
				descriptorul de fisier fiind retinut ca membru al clasei si deschis in Init()
				[Nu ca acum, adica la fiecare post sa fie deschis un nou descriptor]
				=> Toate thread-urile manipuleaza acelasi descriptor si asteapta la scriere daca altcineva e in synchronized